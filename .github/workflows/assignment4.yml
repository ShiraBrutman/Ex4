name: assignment4
on:
  workflow_dispatch:  # Allows manual triggering from GitHub Actions UI
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Initialize log file
        run: |
          echo "Workflow started at $(date -minutes)" > log.txt
          echo "Your Name" >> log.txt
      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3
      - name: Build Stocks Service Image
        id: build-stocks
        run: |
          if docker build -t stocks-service ./stocks; then
            echo "Stocks Service image built successfully" >> log.txt
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "Failed to build Stocks Service image" >> log.txt
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
      - name: Build Capital Gains Service Image
        id: build-capital-gains
        if: steps.build-stocks.outputs.status == 'success'
        run: |
          if docker build -t capital-gains-service ./capital_gains_service; then
            echo "Capital Gains Service image built successfully" >> log.txt
            echo "image successfully built" >> log.txt
          else
            echo "Failed to build Capital Gains Service image" >> log.txt
            echo "image not able to be built" >> log.txt
            exit 1
          fi
      - name: Upload log file
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: workflow-log-build
          path: log.txt

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download log file
        uses: actions/download-artifact@v4
        with:
          name: workflow-log-build
          path: ./
      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose
      - name: Start Docker services
        id: start-services
        run: |
          if docker-compose up -d; then
            echo "Docker services started successfully" >> log.txt
            echo "Container up and running" >> log.txt
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "Failed to start Docker services" >> log.txt
            echo "Container failed to run" >> log.txt
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
      - name: Wait for services to be ready
        if: steps.start-services.outputs.status == 'success'
        run: sleep 10
      - name: Install dependencies
        if: steps.start-services.outputs.status == 'success'
        run: |
          if [ -f stocks/requirements.txt ]; then pip install -r stocks/requirements.txt; fi
          if [ -f capital_gains_service/requirements.txt ]; then pip install -r capital_gains_service/requirements.txt; fi
          pip install pytest requests
      - name: Run tests with Pytest
        id: run-tests
        if: steps.start-services.outputs.status == 'success'
        run: |
          mkdir -p test_results
          if pytest -v tests/assn4_tests.py | tee test_results/assn4_test_results.txt; then
            echo "Tests passed successfully" >> log.txt
            echo "tests succeeded" >> log.txt
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "Tests failed" >> log.txt
            echo "tests failed" >> log.txt
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_id }}
          path: test_results/assn4_test_results.txt
      - name: Upload log file
        uses: actions/upload-artifact@v4
        with:
          name: workflow-log-test
          path: log.txt

  query:
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success' || needs.test.result == 'failure'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download log file from test
        uses: actions/download-artifact@v4
        with:
          name: workflow-log-test
          path: ./
      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose
      - name: Start Docker services
        run: |
          docker-compose up -d
          sleep 10
          docker ps
          echo "Query job: Docker services started successfully" >> log.txt
      - name: Add initial stocks
        run: |
          # Create stocks JSON data files
          cat > stock1.json << 'EOL'
          {"name":"NVIDIA Corporation","symbol":"NVDA","purchase price":134.66,"purchase date":"18-06-2024","shares":7}
          EOL
          cat > stock2.json << 'EOL'
          {"name":"Apple Inc.","symbol":"AAPL","purchase price":183.63,"purchase date":"22-02-2024","shares":19}
          EOL
          cat > stock3.json << 'EOL'
          {"name":"Alphabet Inc.","symbol":"GOOG","purchase price":140.12,"purchase date":"24-10-2024","shares":14}
          EOL
          cat > stock4.json << 'EOL'
          {"name":"Tesla, Inc.","symbol":"TSLA","purchase price":194.58,"purchase date":"28-11-2022","shares":32}
          EOL
          cat > stock5.json << 'EOL'
          {"name":"Microsoft Corporation","symbol":"MSFT","purchase price":420.55,"purchase date":"09-02-2024","shares":35}
          EOL
          cat > stock6.json << 'EOL'
          {"name":"Intel Corporation","symbol":"INTC","purchase price":19.15,"purchase date":"13-01-2025","shares":10}
          EOL
          
          # POST the stocks to the API
          curl -X POST -H "Content-Type: application/json" -d @stock1.json http://localhost:5001/stocks
          curl -X POST -H "Content-Type: application/json" -d @stock2.json http://localhost:5001/stocks
          curl -X POST -H "Content-Type: application/json" -d @stock3.json http://localhost:5001/stocks
          curl -X POST -H "Content-Type: application/json" -d @stock4.json http://localhost:5001/stocks
          curl -X POST -H "Content-Type: application/json" -d @stock5.json http://localhost:5001/stocks
          curl -X POST -H "Content-Type: application/json" -d @stock6.json http://localhost:5001/stocks

      - name: Execute queries
        run: |
          touch response.txt
          while IFS= read -r line || [ -n "$line" ]; do
            SERVICE=$(echo $line | cut -d: -f1)
            QUERY=$(echo $line | cut -d: -f2-)
            
            echo "Processing query: $SERVICE:$QUERY"
            
            if [ "$SERVICE" = "stocks" ]; then
              RESPONSE=$(curl -s "http://localhost:5001/stocks?$QUERY")
            elif [ "$SERVICE" = "capital-gains" ]; then
              RESPONSE=$(curl -s "http://localhost:5003/capital-gains?$QUERY")
            else
              RESPONSE="Error: Unknown service $SERVICE"
            fi
            
            echo -e "query: $SERVICE:$QUERY\nresponse: $RESPONSE\n" >> response.txt
            echo "Executed query: $line" >> log.txt
          done < query.txt

      - name: Upload response file
        uses: actions/upload-artifact@v4
        with:
          name: query-response-${{ github.run_id }}
          path: response.txt
      - name: Upload final log file
        uses: actions/upload-artifact@v4
        with:
          name: workflow-log-final
          path: log.txt